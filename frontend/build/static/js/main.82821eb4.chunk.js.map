{"version":3,"sources":["logo.svg","components/FormView.js","components/Question.js","components/Search.js","components/QuestionView.js","components/Header.js","components/QuizView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormView","props","submitQuestion","event","preventDefault","$","ajax","url","type","dataType","contentType","data","JSON","stringify","question","state","answer","difficulty","category","xhrFields","withCredentials","crossDomain","success","result","document","getElementById","reset","error","alert","handleChange","setState","target","name","value","categories","id","className","onSubmit","this","onChange","Object","keys","map","key","Component","Question","visibleAnswer","src","onClick","questionAction","flipVisibility","style","Search","query","getInfo","submitSearch","handleInputChange","search","placeholder","ref","input","QuestionView","getQuestions","page","questions","totalQuestions","total_questions","currentCategory","current_category","getByCategory","searchTerm","action","window","confirm","num","pageNumbers","maxPage","Math","ceil","i","push","selectPage","q","ind","createPagination","Header","uri","location","href","origin","navTo","QuizView","selectCategory","quizCategory","getNextQuestion","previousQuestions","currentQuestion","previous_questions","quiz_category","showAnswer","guess","forceEnd","submitGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","formatGuess","split","answerArray","correctGuess","word","includes","length","renderFinalScore","renderCorrectAnswer","renderPlay","renderPrePlay","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82821eb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport \"../stylesheets/FormView.css\";\r\n\r\nclass FormView extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      question: \"\",\r\n      answer: \"\",\r\n      difficulty: 1,\r\n      category: 1,\r\n      categories: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    $.ajax({\r\n      url: `https://full-stack-trivia.herokuapp.com/v1/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: result => {\r\n        this.setState({ categories: result.categories });\r\n        return;\r\n      },\r\n      error: error => {\r\n        alert(\"Unable to load categories. Please try your request again\");\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  submitQuestion = event => {\r\n    event.preventDefault();\r\n    $.ajax({\r\n      url: \"https://full-stack-trivia.herokuapp.com/v1/questions\", //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: \"json\",\r\n      contentType: \"application/json\",\r\n      data: JSON.stringify({\r\n        question: this.state.question,\r\n        answer: this.state.answer,\r\n        difficulty: this.state.difficulty,\r\n        category: this.state.category\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: result => {\r\n        document.getElementById(\"add-question-form\").reset();\r\n        return;\r\n      },\r\n      error: error => {\r\n        alert(\"Unable to add question. Please try your request again\");\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"add-form\">\r\n        <h2>Add a New Trivia Question</h2>\r\n        <form\r\n          className=\"form-view\"\r\n          id=\"add-question-form\"\r\n          onSubmit={this.submitQuestion}\r\n        >\r\n          <label>\r\n            Question\r\n            <input type=\"text\" name=\"question\" onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n            Answer\r\n            <input type=\"text\" name=\"answer\" onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n            Difficulty\r\n            <select name=\"difficulty\" onChange={this.handleChange}>\r\n              <option value=\"1\">1</option>\r\n              <option value=\"2\">2</option>\r\n              <option value=\"3\">3</option>\r\n              <option value=\"4\">4</option>\r\n              <option value=\"5\">5</option>\r\n            </select>\r\n          </label>\r\n          <label>\r\n            Category\r\n            <select name=\"category\" onChange={this.handleChange}>\r\n              {Object.keys(this.state.categories).map(id => {\r\n                return (\r\n                  <option key={id} value={id}>\r\n                    {this.state.categories[id]}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </label>\r\n          <input type=\"submit\" className=\"button\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormView;\r\n","import React, { Component } from 'react';\r\nimport '../stylesheets/Question.css';\r\n\r\nclass Question extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      visibleAnswer: false\r\n    }\r\n  }\r\n\r\n  flipVisibility() {\r\n    this.setState({visibleAnswer: !this.state.visibleAnswer});\r\n  }\r\n\r\n  render() {\r\n    const { question, answer, category, difficulty } = this.props;\r\n    return (\r\n      <div className=\"Question-holder\">\r\n        <div className=\"Question\">{question}</div>\r\n        <div className=\"Question-status\">\r\n          <img className=\"category\" src={`${category}.svg`}/>\r\n          <div className=\"difficulty\">Difficulty: {difficulty}</div>\r\n          <img src=\"delete.png\" className=\"delete\" onClick={() => this.props.questionAction('DELETE')}/>\r\n          \r\n        </div>\r\n        <div className=\"show-answer button\"\r\n            onClick={() => this.flipVisibility()}>\r\n            {this.state.visibleAnswer ? 'Hide' : 'Show'} Answer\r\n          </div>\r\n        <div className=\"answer-holder\">\r\n          <span style={{\"visibility\": this.state.visibleAnswer ? 'visible' : 'hidden'}}>Answer: {answer}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question;\r\n","import React, { Component } from 'react'\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: '',\r\n  }\r\n\r\n  getInfo = (event) => {\r\n    event.preventDefault();\r\n    this.props.submitSearch(this.state.query)\r\n  }\r\n\r\n  handleInputChange = () => {\r\n    this.setState({\r\n      query: this.search.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.getInfo}>\r\n        <input\r\n          placeholder=\"Search questions...\"\r\n          ref={input => this.search = input}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <input type=\"submit\" value=\"Submit\" className=\"button\"/>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"../stylesheets/App.css\";\r\nimport Question from \"./Question\";\r\nimport Search from \"./Search\";\r\nimport $ from \"jquery\";\r\n\r\nclass QuestionView extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      questions: [],\r\n      page: 1,\r\n      totalQuestions: 0,\r\n      categories: {},\r\n      currentCategory: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  getQuestions = () => {\r\n    $.ajax({\r\n      url: `https://full-stack-trivia.herokuapp.com/v1/questions?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: result => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          categories: result.categories,\r\n          currentCategory: result.current_category\r\n        });\r\n        return;\r\n      },\r\n      error: error => {\r\n        alert(\"Unable to load questions. Please try your request again\");\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  selectPage(num) {\r\n    this.setState({ page: num }, () => this.getQuestions());\r\n  }\r\n\r\n  createPagination() {\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <span\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            this.selectPage(i);\r\n          }}\r\n        >\r\n          {i}\r\n        </span>\r\n      );\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  getByCategory = id => {\r\n    $.ajax({\r\n      url: `https://full-stack-trivia.herokuapp.com/v1/categories/${id}/questions`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: result => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category\r\n        });\r\n        return;\r\n      },\r\n      error: error => {\r\n        alert(\"Unable to load questions. Please try your request again\");\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  submitSearch = searchTerm => {\r\n    $.ajax({\r\n      url: `https://full-stack-trivia.herokuapp.com/v1/questions/search`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: \"json\",\r\n      contentType: \"application/json\",\r\n      data: JSON.stringify({ searchTerm: searchTerm }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: result => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category\r\n        });\r\n        return;\r\n      },\r\n      error: error => {\r\n        alert(\"Unable to load questions. Please try your request again\");\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  questionAction = id => action => {\r\n    if (action === \"DELETE\") {\r\n      if (window.confirm(\"are you sure you want to delete the question?\")) {\r\n        $.ajax({\r\n          url: `https://full-stack-trivia.herokuapp.com/v1/questions/${id}`, //TODO: update request URL\r\n          type: \"DELETE\",\r\n          success: result => {\r\n            this.getQuestions();\r\n          },\r\n          error: error => {\r\n            alert(\"Unable to load questions. Please try your request again\");\r\n            return;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"question-view\">\r\n        <div className=\"categories-list\">\r\n          <h2\r\n            onClick={() => {\r\n              this.getQuestions();\r\n            }}\r\n          >\r\n            Categories\r\n          </h2>\r\n          <ul>\r\n            {Object.keys(this.state.categories).map(id => (\r\n              <li\r\n                key={id}\r\n                onClick={() => {\r\n                  this.getByCategory(id);\r\n                }}\r\n              >\r\n                {this.state.categories[id]}\r\n                <img\r\n                  className=\"category\"\r\n                  src={`${this.state.categories[id]}.svg`}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <Search submitSearch={this.submitSearch} />\r\n        </div>\r\n        <div className=\"questions-list\">\r\n          <h2>Questions</h2>\r\n          {this.state.questions.map((q, ind) => (\r\n            <Question\r\n              key={q.id}\r\n              question={q.question}\r\n              answer={q.answer}\r\n              category={this.state.categories[q.category]}\r\n              difficulty={q.difficulty}\r\n              questionAction={this.questionAction(q.id)}\r\n            />\r\n          ))}\r\n          <div className=\"pagination-menu\">{this.createPagination()}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionView;\r\n","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../stylesheets/Header.css';\r\n\r\nclass Header extends Component {\r\n\r\n  navTo(uri){\r\n    window.location.href = window.location.origin + uri;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App-header\">\r\n        <h1 onClick={() => {this.navTo('')}}>Udacitrivia</h1>\r\n        <h2 onClick={() => {this.navTo('')}}>List</h2>\r\n        <h2 onClick={() => {this.navTo('/add')}}>Add</h2>\r\n        <h2 onClick={() => {this.navTo('/play')}}>Play</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport \"../stylesheets/QuizView.css\";\r\n\r\nconst questionsPerPlay = 5;\r\n\r\nclass QuizView extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      categories: {},\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: \"\",\r\n      forceEnd: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    $.ajax({\r\n      url: `https://full-stack-trivia.herokuapp.com/v1/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: result => {\r\n        this.setState({ categories: result.categories });\r\n        return;\r\n      },\r\n      error: error => {\r\n        alert(\"Unable to load categories. Please try your request again\");\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  selectCategory = ({ type, id = 0 }) => {\r\n    this.setState({ quizCategory: { type, id } }, this.getNextQuestion);\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  getNextQuestion = () => {\r\n    const previousQuestions = [...this.state.previousQuestions];\r\n    if (this.state.currentQuestion.id) {\r\n      previousQuestions.push(this.state.currentQuestion.id);\r\n    }\r\n\r\n    // console.log(JSON.stringify({\r\n    //   previous_questions: previousQuestions,\r\n    //   quiz_category: this.state.quizCategory\r\n    // }));\r\n\r\n    $.ajax({\r\n      url: \"https://full-stack-trivia.herokuapp.com/v1/quizzes\", //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: \"json\",\r\n      contentType: \"application/json\",\r\n      data: JSON.stringify({\r\n        previous_questions: previousQuestions,\r\n        quiz_category: this.state.quizCategory\r\n      }),\r\n      crossDomain: true,\r\n      success: result => {\r\n        this.setState({\r\n          showAnswer: false,\r\n          previousQuestions: previousQuestions,\r\n          currentQuestion: result.question,\r\n          guess: \"\",\r\n          forceEnd: result.question ? false : true\r\n        });\r\n        return;\r\n      },\r\n      error: error => {\r\n        alert(\"Unable to load question. Please try your request again\");\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  submitGuess = event => {\r\n    event.preventDefault();\r\n    const formatGuess = this.state.guess\r\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\")\r\n      .toLowerCase();\r\n    let evaluate = this.evaluateAnswer();\r\n    this.setState({\r\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n      showAnswer: true\r\n    });\r\n  };\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: \"\",\r\n      forceEnd: false\r\n    });\r\n  };\r\n\r\n  renderPrePlay() {\r\n    return (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"choose-header\">Choose Category</div>\r\n        <div className=\"category-holder\">\r\n          <div className=\"play-category\" onClick={this.selectCategory}>\r\n            ALL\r\n          </div>\r\n          {Object.keys(this.state.categories).map(id => {\r\n            return (\r\n              <div\r\n                key={id}\r\n                value={id}\r\n                className=\"play-category\"\r\n                onClick={() =>\r\n                  this.selectCategory({ type: this.state.categories[id], id })\r\n                }\r\n              >\r\n                {this.state.categories[id]}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderFinalScore() {\r\n    return (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"final-header\">\r\n          {\" \"}\r\n          Your Final Score is {this.state.numCorrect}\r\n        </div>\r\n        <div className=\"play-again button\" onClick={this.restartGame}>\r\n          {\" \"}\r\n          Play Again?{\" \"}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  evaluateAnswer = () => {\r\n    const formatGuess = this.state.guess\r\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\")\r\n      .toLowerCase()\r\n      .split(\" \");\r\n    const answerArray = this.state.currentQuestion.answer\r\n      .toLowerCase()\r\n      .split(\" \");\r\n\r\n    let correctGuess = false;\r\n\r\n    // This was modified to enable to evaluation of guesses containing multiple words\r\n    for (const word of formatGuess) {\r\n      if (answerArray.includes(word)) {\r\n        correctGuess = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return correctGuess;\r\n  };\r\n\r\n  renderCorrectAnswer() {\r\n    const formatGuess = this.state.guess\r\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\")\r\n      .toLowerCase();\r\n    let evaluate = this.evaluateAnswer();\r\n    return (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"quiz-question\">\r\n          {this.state.currentQuestion.question}\r\n        </div>\r\n        <div className={`${evaluate ? \"correct\" : \"wrong\"}`}>\r\n          {evaluate ? \"You were correct!\" : \"You were incorrect\"}\r\n        </div>\r\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\r\n        <div className=\"next-question button\" onClick={this.getNextQuestion}>\r\n          {\" \"}\r\n          Next Question{\" \"}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderPlay() {\r\n    return this.state.previousQuestions.length === questionsPerPlay ||\r\n      this.state.forceEnd ? (\r\n      this.renderFinalScore()\r\n    ) : this.state.showAnswer ? (\r\n      this.renderCorrectAnswer()\r\n    ) : (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"quiz-question\">\r\n          {this.state.currentQuestion.question}\r\n        </div>\r\n        <form onSubmit={this.submitGuess}>\r\n          <input type=\"text\" name=\"guess\" onChange={this.handleChange} />\r\n          <input\r\n            className=\"submit-guess button\"\r\n            type=\"submit\"\r\n            value=\"Submit Answer\"\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\r\n  }\r\n}\r\n\r\nexport default QuizView;\r\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\n// import logo from './logo.svg';\nimport './stylesheets/App.css';\nimport FormView from './components/FormView';\nimport QuestionView from './components/QuestionView';\nimport Header from './components/Header';\nimport QuizView from './components/QuizView';\n\n\nclass App extends Component {\n  render() {\n    return (\n    <div className=\"App\">\n      <Header path />\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={QuestionView} />\n          <Route path=\"/add\" component={FormView} />\n          <Route path=\"/play\" component={QuizView} />\n          <Route component={QuestionView} />\n        </Switch>\n      </Router>\n    </div>\n  );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n //\"start\": \"HOST='127.0.0.1' PORT='5000' react-scripts start\",\n"],"sourceRoot":""}